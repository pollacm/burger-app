Add css classes to the project
	Eject the project
Creating a layout component
	subfolder structure
		src/containers
		src/components
		src/components/UI
		src/assets
		src/hoc
	Good practice once you come up with your design, to just spit out dummy text to make sure everything is tied together.
Validating prop-types	
	can restrict the types and values you receive for your props
	there is another package for this [Does NOT work in functional components]
		npm install --save prop-types
			import PropTypes from 'prop-types';
			below your class definition, right above your export, add
				{YourObject}.propTypes = {
					click: PropTypes.func,
					name: PropTypes.string.isRequired,
					age: PropTypes.number,
					changed: PropTypes.func
				}
Building the Burger
	You typically name global constants in a file with all caps
	to fill in parameters to a method when a handler was passed in 
		{() => props.ingredientAdded(ctrl.type)}
When you are setting classes from the compiled css dynamically
	classes[props.btnType]
For images
	you need to import them
		import burgerLogo from '../../assets/images/burger-logo.png';
	Call that in the source of the image tag
		<img src={burgerLogo} />
Can reload the home page by putting "/" into the href of the link
If setting a prop to "true", you only need to do below
	<NavigationItem link="/" active>Burger Builder</NavigationItem>
For dynamic resizing of elements (i.e. logo), you can do this in the prop calling it
	<Logo height="80%" />
	then...
		<div className={classes.Logo} style={{height: props.height}}>
	An alternative
		could wrap that element in a div
When setting state using a current value of state, you need to use the method declaration of setState using the previous state to be sure you have the correct state
	this.setState((prevState) => 
	{
		return {showSideDrawer: !prevState.showSideDrawer}
	});
Improving Performance
	componentWillUpdate is depreciated [will retire in react 17], should use getSnapshotBeforeUpdate combined with componentDidUpdate instead	
		getSnapshotBeforeUpdate(prevProps, prevState) {
			console.log('[Modal] - getSnapshotBeforeUpdate');
			return "1";
		}

		componentDidUpdate(prevProps, prevState, snapshot) {
			console.log('[Modal] - componentDidUpdate', prevProps, prevState, snapshot);
		}
More on lifecycle hooks
	componentDidMount and componentDidUpdate are import for causing side effects
		reaching out to a web service and fetching things from there
	WillUpdate
		typically dont use these that often
Folder Structure
	Typcially if a component handles other components they could be considered containers because other components are contained within them
	Burger Builder is essentially just wrapped with Layout, making layout a higher order component